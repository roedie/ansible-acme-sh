---

- name: Create certificate path
  file:
    path: "{{ copy_certs_to_path | default(acme_sh_copy_certs_to_path) }}"
    state: "directory"
    owner: "{{ acme_sh_become_user }}"
    group: "{{ acme_sh_become_user }}"
    mode: "0755"
  loop: "{{ acme_sh_domains }}"
  loop_control:
    index_var: domains_index

- name: Ensure installed certificates have correct user / group ownership
  file:
    path: "{{ copy_certs_to_path | default(acme_sh_copy_certs_to_path) }}/{{ item.domains | first }}*"
    group: "{{ acme_sh_become_user }}"
    owner: "{{ acme_sh_become_user }}"
  loop:
    - "{{ acme_sh_domains }}"

- name: Install acme.sh certificate(s)
  command: >-
    ./acme.sh --install-cert -d {{ item.domains | first }}
    --key-file {{ item.copy_certs_to_path | default(acme_sh_copy_certs_to_path) }}/{{ item.domains | first }}.key
    --fullchain-file {{ item.copy_certs_to_path | default(acme_sh_copy_certs_to_path) }}/{{ item.domains | first }}.pem
    --reloadcmd "{{ item.install_cert_reloadcmd | default(acme_sh_default_install_cert_reloadcmd) }}"
    {{ "--debug" if item.debug | default(acme_sh_default_debug) else "" }}
    {{ item.extra_flags_install_cert | default(acme_sh_default_extra_flags_install_cert) }}
  args:
    chdir: "~/.acme.sh"
  loop: "{{ acme_sh_domains }}"
  loop_control:
    index_var: domains_index
  become_user: "{{ acme_sh_become_user }}"
  register: install_cert_result
  changed_when: issue_result.results[domains_index].changed or renew_result.results[domains_index].changed
  failed_when: install_cert_result.rc != 0 and "Reload error for" not in install_cert_result.stderr
  when:
    - item.deploy is undefined


- name: Deploy acme.sh certificate(s)
  command: >-
    ./acme.sh --deploy -d {{ item.domains | first }}
    --deploy-hook {{ item.deploy_hook | default(acme_sh_default_deploy_hook) }}
    {{ "--debug" if item.debug | default(acme_sh_default_debug) else "" }}
    {{ item.extra_flags_install_cert | default(acme_sh_default_extra_flags_install_cert) }}
  args:
    chdir: "~/.acme.sh"
  environment: "{{ item.deploy_envs | default(acme_sh_default_deploy_envs) }}"
  loop: "{{ acme_sh_domains }}"
  loop_control:
    index_var: domains_index
  become_user: "{{ acme_sh_become_user }}"
  register: deploy_cert_result
  changed_when: issue_result.results[domains_index].changed or renew_result.results[domains_index].changed
  failed_when: deploy_cert_result.rc != 0 and "Deploy error" not in deploy_cert_result.stderr
  when:
    - item.deploy is defined
    - item.deploy_envs is defined or acme_sh_default_deploy_envs is defined
    - item.deploy_hook is defined or acme_sh_default_deploy_hook is defined
